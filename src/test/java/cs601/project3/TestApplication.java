package cs601.project3;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.Socket;
import java.util.HashMap;


import org.junit.Assert;
import org.junit.Test;

public class TestApplication {
	
	//Unit Test
	/**
	 * Tests reading parameters from url
	 * @throws IOException
	 */
	@Test
	public void testParseBody() throws IOException {	
		Socket socket = null;
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=jumpers&asin=B123&message=hello!", "jumpers", "query");
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=jumpers&asin=B123&message=hello!", "B123", "asin");
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=jumpers&asin=B123&message=hello!", "hello!", "message");
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=&asin=!@#$%^&*&message=i have space", null , "query");
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=&asin=!@#$%^&*&message=i have space", "!@#$%^", "asin");
		checkParseBody(new HTTPRequestHandler(socket, "log/TestFile.log"), "query=&asin=!@#$%^&*&message=i have space", "i have space", "message");
	}
	
	/**
	 * Tests reading header request
	 * @throws IOException
	 */
	@Test
	public void testParseHeader() throws IOException {
		ConfigurationManager config = new ConfigurationManager();
		checkParseHeader("", "", "", false, "");
		checkParseHeader("PUT /reviewsearch", "PUT", "/reviewsearch", false, "");
		checkParseHeader("PULL /slackbot", "PULL", "/slackbot", false, "");
		checkParseHeader("GET /slackbot", "GET", "/slackbot", false, "");
		checkParseHeader("POST /slackbot", "POST", "/slackbot", false, "");
		checkParseHeader("POST /reviewsearch", "POST", "/reviewsearch", false, "");
		checkParseHeader("POST /reviewsearch?query=jumpers", "POST", "/reviewsearch", true, "query");
		checkParseHeader("POST /reviewsearch?query=jumpers&unknown=unknown", "POST", "/reviewsearch", true, "unknown");
		checkParseHeader("POST /reviewsearch?error", "POST", "/reviewsearch", false, "error");
		checkParseHeader("GET /reviewsearch?query=jumpers", "GET", "/reviewsearch", true, "query");
		checkParseHeader("GET /", "GET", "/", false, "");
		
	}
	
	/**
	 * Tests response generated by the server
	 * @throws IOException
	 */
	@Test
	public void testResponse() throws IOException {
		ConfigurationManager config = new ConfigurationManager();
		HashMap<String, Handler> map = new HashMap<String,Handler>();
		HashMap<String, String> parameters = new HashMap<String, String>();
		checkResponse(new RequestObject("", "", parameters), HTTPConstants.BAD_REQUEST, map);
		checkResponse(new RequestObject("PUT", "/reviewsearch", parameters), HTTPConstants.NOT_ALLOWED, map);
		checkResponse(new RequestObject("PULL",  "/slackbot", parameters), HTTPConstants.NOT_ALLOWED, map);
		checkResponse(new RequestObject("GET", "/slackbot", parameters), HTTPConstants.NOT_FOUND, map);
		checkResponse(new RequestObject("POST", "/slackbot", parameters), HTTPConstants.NOT_FOUND, map);
		map.put("/slackbot", new ChatHandler(config.getConfig()));
		checkResponse(new RequestObject("POST", "/slackbot", parameters), HTTPConstants.OK_HEADER, map);
		checkResponse(new RequestObject("POST",  "/reviewsearch", parameters), HTTPConstants.NOT_FOUND, map);
		map.put("/reviewsearch", new ReviewSearchHandler(config.getConfig(), new InvertedIndex()));
		checkResponse(new RequestObject("POST", "/reviewsearch", parameters),  HTTPConstants.OK_HEADER, map);
		parameters.put("query", "jumpers");
		checkResponse(new RequestObject("POST", "/reviewsearch", parameters), HTTPConstants.OK_HEADER, map);
		parameters.put("unknown", "unknown");
		checkResponse(new RequestObject("POST", "/reviewsearch", parameters), HTTPConstants.OK_HEADER, map);
		parameters.remove("query");
		checkResponse(new RequestObject("GET", "/reviewsearch", parameters), HTTPConstants.OK_HEADER, map);
		checkResponse(new RequestObject("GET", "/", parameters), HTTPConstants.NOT_FOUND, map);
	}
	
	//Integration Test
	/**
	 * tests the message sent to slack from intended parameters
	 */
	@Test
	public void testMessageToSlack() {
		ConfigurationManager config = new ConfigurationManager();
		HashMap<String, String> parameters = new HashMap<String, String>();
		RequestObject request = new RequestObject("GET", "/slack", parameters);
		checkMessageToSlack(config.getConfig(), request, "");
		parameters.put("message", "HELLO!");
		checkMessageToSlack(config.getConfig(), request, "");
		request.setMethod("POST");
		checkMessageToSlack(config.getConfig(), request, "HELLO!");
		parameters.remove("message");
		parameters.put("asin", "ABC123");
		checkMessageToSlack(config.getConfig(), request, "");
		parameters.put("message",  "BYE!");
		checkMessageToSlack(config.getConfig(), request, "BYE!");
	}
	/**
	 * Tests response body generated for specified paramters
	 */
	@Test
	public void testShowResult() {
		ConfigurationManager config = new ConfigurationManager();
		InvertedIndex index = new InvertedIndex();
		FileManager manager = new FileManager(config.getConfig().getFileName(), index);
		HashMap<String, String> parameters = new HashMap<String, String>();
		checkFindHandler(config.getConfig(), index, new RequestObject("", "", parameters), 0);
		parameters.put("asin", "ABCD");
		checkFindHandler(config.getConfig(), index, new RequestObject("", "", parameters), 0);
		parameters.put("asin", "B00002243X");
		checkFindHandler(config.getConfig(), index, new RequestObject("", "", parameters), 10);
		checkReviewSearchHandler(config.getConfig(), index, new RequestObject("", "", parameters), 0);
		parameters.put("query", "ASDAJKSDJHKASJK");
		checkReviewSearchHandler(config.getConfig(), index, new RequestObject("", "", parameters), 0);
		parameters.put("query", "jumpers");
		checkReviewSearchHandler(config.getConfig(), index, new RequestObject("", "", parameters), 8);
	}
	
	/**
	 * Tests output given request
	 * @throws IOException
	 */
	//System Test
	
	@Test
	public void checkProjectOutput() throws IOException {
		checkServerOutput(8080, "/reviewsearch", "", "GET", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/reviewsearch", "", "PULL", HTTPConstants.NOT_ALLOWED);
		checkServerOutput(8080, "/reviewsearch", "query=the", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/reviewsearch", "query=computer%20science", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/reviewsearchcurl", "query=computer%20science", "POST", HTTPConstants.NOT_FOUND);
		checkServerOutput(8080, "/reviewsearch", "query=computer%20science&query=computer%20science", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/find", "", "GET", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/find", "", "PULL", HTTPConstants.NOT_ALLOWED);
		checkServerOutput(8080, "/find", "asin=the", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/find", "asin=B00002243X", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(8080, "/findcurl", "asin=B00002243X", "POST", HTTPConstants.NOT_FOUND);
		checkServerOutput(8080, "/find", "asin=B00002243X&asin=B00002243X", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(9090, "/slackbot", "", "GET", HTTPConstants.OK_HEADER);
		checkServerOutput(9090, "/slackbot", "", "PULL", HTTPConstants.NOT_ALLOWED);
		checkServerOutput(9090, "/slackbot", "message=hello", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(9090, "/slackbot", "message=bye", "POST", HTTPConstants.OK_HEADER);
		checkServerOutput(9090, "/slackbotds", "message=bye", "POST", HTTPConstants.NOT_FOUND);
		checkServerOutput(9090, "/slackbot", "message=bye&message=bye", "POST", HTTPConstants.OK_HEADER);
	}
	
	//Methods
	
	/**
	 * Checks parsed body
	 * @param request
	 * @param param
	 * @param expected
	 * @param key
	 */
	public void checkParseBody(HTTPRequestHandler request, String param, String expected, String key) {
		request.parseParameters(param);
		Assert.assertEquals(expected, request.getRequest().getParameters().get(key));
	}
	
	/**
	 * checks parsed header
	 * @param requestLine
	 * @param expectedMethod
	 * @param expectedPath
	 * @param contains
	 * @param expectedParam
	 * @throws IOException
	 */
	public void checkParseHeader(String requestLine, String expectedMethod, String expectedPath, boolean contains, String expectedParam) throws IOException {
		Socket socket = null;
		HTTPRequestHandler response = new HTTPRequestHandler(socket, "log/TestFile.log");
		response.parseRequestLine(requestLine);
		Assert.assertEquals(expectedMethod, response.getRequest().getMethod());
		Assert.assertEquals(expectedPath, response.getRequest().getPath());
		Assert.assertEquals(contains, response.getRequest().getParameters().containsKey(expectedParam));
	}
	
	/**
	 * check generated response
	 * @param request
	 * @param expected
	 * @param handler
	 * @throws IOException
	 */
	public void checkResponse(RequestObject request, String expected, HashMap<String, Handler> handler) throws IOException {
		StringWriter out = new StringWriter();
		PrintWriter writer = new PrintWriter(out);
		HashMap<String, Handler> map = handler;
		HTTPResponseHandler response = new HTTPResponseHandler(writer, request, map, "log/TestFile.log");
		response.respond();
		String output = "";
		if (out.toString().length()>0) {
			output = out.toString().split("\\r\\n|\\n|\\r")[0] + "\r\n";
		}
		Assert.assertEquals(expected, output);
	}
	
	/**
	 * Checks message sent to slack
	 * @param config
	 * @param request
	 * @param message
	 */
	public void checkMessageToSlack(Config config, RequestObject request, String message) {
		ChatHandler handler = new ChatHandler(config);
		StringWriter out = new StringWriter();
		PrintWriter writer = new PrintWriter(out);
		handler.handle(writer, request);
		Assert.assertEquals(message, handler.getMessage());
		
	}
	
	/**
	 * checks output of find handler
	 * @param config
	 * @param index
	 * @param request
	 * @param expectedSize
	 */
	public void checkFindHandler(Config config, InvertedIndex index, RequestObject request, int expectedSize) {
		StringWriter out = new StringWriter();
		PrintWriter writer = new PrintWriter(out);
		FindHandler handler = new FindHandler(config, index);
		handler.handle(writer, request);
		Assert.assertEquals(expectedSize, handler.getList().size());
	}
	
	/**
	 * checks output of reviewsearch
	 * @param config
	 * @param index
	 * @param request
	 * @param expectedSize
	 */
	public void checkReviewSearchHandler(Config config, InvertedIndex index, RequestObject request, int expectedSize) {
		StringWriter out = new StringWriter();
		PrintWriter writer = new PrintWriter(out);
		ReviewSearchHandler handler = new ReviewSearchHandler(config, index);
		handler.handle(writer, request);
		Assert.assertEquals(expectedSize, handler.getList().size());
	}
	
	/**
	 * chekces server output
	 * @param port
	 * @param path
	 * @param parameter
	 * @param method
	 * @param expected
	 * @throws IOException
	 */
	public void checkServerOutput(int port, String path, String parameter, String method, String expected) throws IOException {
		ClientApplication app = new ClientApplication(port, path, parameter, method);
		Assert.assertEquals(expected, app.getHeaders().split("\r\n")[0]);
	}
}
